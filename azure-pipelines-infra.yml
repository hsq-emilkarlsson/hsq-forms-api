# üöÄ HSQ Forms API - Azure DevOps Infrastructure Testing Pipeline
# Pipeline f√∂r att testa olika infrastrukturapproacher med Bicep

trigger:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

pr:
  branches:
    include:
      - main
      - develop
  paths:
    include:
      - infra/**
      - azure-pipelines-infra.yml

# Pipeline-variabler
variables:
  # Milj√∂er och resursgrupper
  dev_subscription: 'c0b03b12-570f-4442-b337-c9175ad4037f'
  dev_resource_group: 'rg-hsq-forms-dev'
  serviceConnection: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab' # Service Connection-namn i Azure DevOps
  location: 'westeurope'

parameters:
- name: infraApproach
  displayName: 'Infrastruktur-approach att testa'
  type: string
  default: '01-default'
  values:
  - '01-default'
  - '02-minimal'
  - '03-no-vnet'
  - '04-minimal-vnet'
  - '05-secure'
  - '06-avm'
  - '07-ready'
  - '08-appservice'

- name: deployInfra
  displayName: 'Deployment av infrastruktur'
  type: boolean
  default: true

stages:
- stage: ValidateBicep
  displayName: 'Validera Bicep-mall'
  jobs:
  - job: ValidateTemplates
    displayName: 'Validera infrastruktur-template'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Validera Bicep-mall'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Hitta relevant bicep-fil och parameter-fil baserat p√• vald approach
          approach_dir="infra/approaches/${{ parameters.infraApproach }}"
          bicep_file=$(find $approach_dir -name "*.bicep" | head -n 1)
          params_file=$(find $approach_dir -name "*.parameters.dev.json" | head -n 1)
          
          echo "üìã Validerar Bicep-mall: $bicep_file"
          echo "üìã Parametersfil: $params_file"
          
          # Validera template syntax (kommer inte g√∂ra deployment)
          az deployment group validate \
            --resource-group $(dev_resource_group) \
            --template-file "$bicep_file" \
            --parameters @"$params_file" \
            --parameters dbAdminPassword="ValidateOnly123!" \
            --verbose
            
          if [ $? -eq 0 ]; then
            echo "‚úÖ Bicep-validering lyckades!"
          else
            echo "‚ùå Bicep-validering misslyckades!"
            exit 1
          fi
          
          # F√∂rhandsgranska √§ndringar (What-if)
          echo "üìä F√∂rhandsgranskning av infrastruktur-√§ndringar:"
          az deployment group what-if \
            --resource-group $(dev_resource_group) \
            --template-file "$bicep_file" \
            --parameters @"$params_file" \
            --parameters dbAdminPassword="ValidateOnly123!" \
            --verbose
    
- stage: DeployInfrastructure
  displayName: 'Testa deployment av infrastruktur'
  dependsOn: ValidateBicep
  condition: and(succeeded(), eq('${{ parameters.deployInfra }}', true))
  jobs:
  - job: DeployInfra
    displayName: 'Deploy infrastruktur till DEV'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Deploy Bicep (${{ parameters.infraApproach }})'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Hitta relevant bicep-fil och parameter-fil baserat p√• vald approach
          approach_dir="infra/approaches/${{ parameters.infraApproach }}"
          bicep_file=$(find $approach_dir -name "*.bicep" | head -n 1)
          params_file=$(find $approach_dir -name "*.parameters.dev.json" | head -n 1)
          
          echo "üöÄ Deploying: $bicep_file"
          echo "üîß Parameters: $params_file"
          
          # Deploy infrastructure
          az deployment group create \
            --resource-group $(dev_resource_group) \
            --template-file "$bicep_file" \
            --parameters @"$params_file" \
            --parameters dbAdminPassword="$(DB_ADMIN_PASSWORD)" \
            --name "hsq-forms-${{ parameters.infraApproach }}-test-$(Build.BuildId)"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Deployment lyckades!"
          else
            echo "‚ùå Deployment misslyckades!"
            exit 1
          fi
    
    - task: AzureCLI@2
      displayName: 'Visa skapade resurser'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üìã Lista p√• skapade resurser i $(dev_resource_group):"
          az resource list --resource-group $(dev_resource_group) --output table
          
          echo "üìä Deployment-outputs fr√•n senaste deployment:"
          az deployment group show \
            --resource-group $(dev_resource_group) \
            --name "hsq-forms-${{ parameters.infraApproach }}-test-$(Build.BuildId)" \
            --query properties.outputs \
            --output json

- stage: CleanupInfrastructure
  displayName: 'Rensa infrastruktur (valfritt)'
  dependsOn: DeployInfrastructure
  condition: false # Inaktiverad som standard, aktivera endast f√∂r rensning
  jobs:
  - job: CleanupResources
    displayName: 'Rensa resurser'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Ta bort skapade resurser'
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "‚ö†Ô∏è VARNING: Detta kommer att ta bort alla resurser i $(dev_resource_group)!"
          read -p "√Ñr du s√§ker att du vill forts√§tta? (y/n) " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo "üßπ Tar bort resurser..."
            az group delete --name $(dev_resource_group) --yes --no-wait
            echo "‚úÖ Rensning p√•b√∂rjad. Resursgruppen tas bort i bakgrunden."
          else
            echo "‚ùå Rensning avbruten."
          fi
