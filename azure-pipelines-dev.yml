# üöÄ HSQ Forms API - Azure DevOps Pipeline (Development)
# Pipeline f√∂r att bygga, testa och deploya HSQ Forms API p√• Azure App Service
# Denna pipeline √§r f√∂r utvecklingsmilj√∂n

trigger:
  branches:
    include:
      - develop
  paths:
    include:
      - src/**
      - infra/**
      - main.py
      - requirements.txt
      - alembic/**
      - azure-pipelines-dev.yml
      - forms/**

variables:
  # Environment settings
  environment: 'dev'
  projectName: 'hsq-forms'
  location: 'westeurope'
  pythonVersion: '3.11'
  subscriptionId: 'c0b03b12-570f-4442-b337-c9175ad4037f'
  resourceGroupName: 'rg-hsq-forms-dev'
  appServiceSku: 'B1'

stages:
- stage: Test
  displayName: 'Test Application'
  jobs:
  - job: TestCode
    displayName: 'Run Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest pytest-asyncio pydantic pydantic-settings
      displayName: 'Install dependencies'
    
    - script: |
        export SKIP_API_TESTS=true
        python -m pytest tests/ -v --tb=short -k "not test_live_azure_storage_connection and not test_live_database_connection"
      displayName: 'Run tests'
      continueOnError: true

- stage: Infrastructure
  displayName: 'Infrastructure Validation'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: ValidateInfrastructure
    displayName: 'Validate Azure Resources'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: AzureCLI@2
      displayName: 'Check Existing Resources'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "‚úÖ Kontrollerar befintliga Azure-resurser..."
          echo "üìã Resurser i resursgruppen $(resourceGroupName):"
          az resource list --resource-group $(resourceGroupName) --output table
          
          # Kontrollera att App Service finns
          APP_SERVICE_EXISTS=$(az webapp show --name "hsq-forms-api-dev" --resource-group $(resourceGroupName) --query "name" -o tsv 2>/dev/null)
          if [ -n "$APP_SERVICE_EXISTS" ]; then
            echo "‚úÖ App Service 'hsq-forms-api-dev' existerar redan."
          else
            echo "‚ùå App Service 'hsq-forms-api-dev' hittades inte."
            echo "‚ö†Ô∏è Detta √§r ett problem eftersom infrastrukturen redan borde vara uppsatt manuellt."
            exit 1
          fi
          
          echo "‚úÖ Infrastrukturvalidering slutf√∂rd."

- stage: DeployApp
  displayName: 'Deploy Application'
  dependsOn: Infrastructure
  condition: succeeded()
  jobs:
  - job: DeployToAppService
    displayName: 'Deploy API to App Service'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        # Create deployment package
        echo "üì¶ Creating API deployment package..."
        mkdir -p $(Build.ArtifactStagingDirectory)/app
        cp -r src/ main.py alembic/ alembic.ini requirements.txt scripts/ $(Build.ArtifactStagingDirectory)/app/
        cd $(Build.ArtifactStagingDirectory)
        zip -r app.zip app/
      displayName: 'Prepare API Deployment Package'
    
    - task: AzureWebApp@1
      displayName: 'Deploy API to Azure App Service'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        appType: 'webAppLinux'
        appName: 'hsq-forms-api-dev'
        package: '$(Build.ArtifactStagingDirectory)/app.zip'
        runtimeStack: 'PYTHON|3.11'
        startUpCommand: 'gunicorn main:app --workers 2 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000'
    
    - task: AzureCLI@2
      displayName: 'Run Database Migrations'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Anv√§nd det befintliga App Service-namnet
          echo "üîç Anv√§nder befintlig App Service: hsq-forms-api-dev"
          APP_SERVICE_NAME="hsq-forms-api-dev"
          
          # H√§mta connection string fr√•n App Service settings
          echo "üîÑ Running database migrations..."
          CONNECTION_STRING=$(az webapp config appsettings list --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --query "[?name=='SQLALCHEMY_DATABASE_URI'].value" -o tsv)
          
          # K√∂r migreringar
          pip install -r requirements.txt
          export SQLALCHEMY_DATABASE_URI="$CONNECTION_STRING"
          python -m alembic upgrade head
          
          echo "‚úÖ API deployment successful! Application available at: https://$APP_SERVICE_NAME.azurewebsites.net/"

    - task: AzureCLI@2
      displayName: 'Verify Azure Connections'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Anv√§nd det befintliga App Service-namnet
          APP_SERVICE_NAME="hsq-forms-api-dev"
          echo "üîç Anv√§nder befintlig App Service: $APP_SERVICE_NAME"
          
          # H√§mta App Service-inst√§llningar
          echo "üìã H√§mtar App Service-inst√§llningar..."
          DB_URI=$(az webapp config appsettings list --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --query "[?name=='SQLALCHEMY_DATABASE_URI'].value" -o tsv)
          STORAGE_ACCOUNT=$(az webapp config appsettings list --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --query "[?name=='AZURE_STORAGE_ACCOUNT_NAME'].value" -o tsv)
          CLIENT_ID=$(az webapp config appsettings list --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --query "[?name=='AZURE_CLIENT_ID'].value" -o tsv)
          
          # Om inte alla inst√§llningar finns, uppdatera dem baserat p√• de manuellt uppsatta resurserna
          if [ -z "$STORAGE_ACCOUNT" ]; then
            echo "‚ö†Ô∏è AZURE_STORAGE_ACCOUNT_NAME saknas i App Service-inst√§llningar. S√§tter till 'hsqformsdev'..."
            STORAGE_ACCOUNT="hsqformsdev"
            az webapp config appsettings set --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --settings AZURE_STORAGE_ACCOUNT_NAME="$STORAGE_ACCOUNT"
          fi
          
          if [ -z "$CLIENT_ID" ]; then
            echo "‚ö†Ô∏è AZURE_CLIENT_ID saknas i App Service-inst√§llningar. H√§mtar fr√•n hanterad identitet..."
            CLIENT_ID=$(az identity show --name "hsq-forms-identity-dev" --resource-group $(resourceGroupName) --query "clientId" -o tsv)
            az webapp config appsettings set --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --settings AZURE_CLIENT_ID="$CLIENT_ID"
          fi
          
          # S√§tt milj√∂variabler f√∂r testskriptet
          export SQLALCHEMY_DATABASE_URI="$DB_URI"
          export AZURE_STORAGE_ACCOUNT_NAME="$STORAGE_ACCOUNT"
          export AZURE_CLIENT_ID="$CLIENT_ID"
          export AZURE_STORAGE_CONTAINER_NAME="form-uploads"
          export AZURE_STORAGE_TEMP_CONTAINER_NAME="temp-uploads"
          
          # Installera beroenden
          pip install -r requirements.txt
          pip install azure-identity azure-storage-blob sqlalchemy psycopg2-binary
          
          # V√§nta p√• att App Service ska vara helt uppstartad och tillg√§nglig
          echo "‚è≥ V√§ntar p√• att App Service ska starta upp helt (60 sekunder)..."
          sleep 60
          
          # K√∂r verifieringsskript
          echo "üß™ K√∂r Azure-anslutningstester..."
          python $(Build.ArtifactStagingDirectory)/app/scripts/test-azure-connection.py
          
          # Beh√•ll exit-koden fr√•n testskriptet men l√•t bygget forts√§tta
          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 0 ]; then
            echo "‚ö†Ô∏è Azure-anslutningstester rapporterade problem, men vi forts√§tter bygget."
            echo "üëâ Kontrollera resultaten manuellt!"
          else
            echo "‚úÖ Azure-anslutningstester genomf√∂rda framg√•ngsrikt!"
          fi
          # Returnera alltid 0 f√∂r att l√•ta pipeline forts√§tta
          exit 0

  - job: ValidateForms
    displayName: 'Validate Forms (Prepare for Future Deployment)'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - script: |
        # Kontrollera om formul√§rmappen finns och inneh√•ller formul√§r
        echo "üîç Kontrollerar formul√§r..."
        if [ -d "forms" ]; then
          FORMS_COUNT=$(find forms -type d -name "hsq-forms-container-*" | wc -l)
          echo "üìã Hittade $FORMS_COUNT formul√§r i 'forms/'-mappen"
          
          if [ $FORMS_COUNT -gt 0 ]; then
            echo "‚úÖ Formul√§r finns tillg√§ngliga f√∂r framtida deployment"
            
            # Lista alla formul√§r f√∂r framtida reference
            echo "üìã Tillg√§ngliga formul√§r:"
            find forms -type d -name "hsq-forms-container-*" -exec basename {} \;
          else
            echo "‚ö†Ô∏è Inga formul√§r hittades i 'forms/'-mappen"
          fi
        else
          echo "‚ö†Ô∏è Mappen 'forms/' hittades inte"
        fi
      displayName: 'Validate Forms Structure'

# Framtida formul√§rdistributionsjobb (inaktiverat tills vidare)
# - job: DeployForms
#   displayName: 'Deploy Form Web Applications'
#   dependsOn: ValidateForms
#   condition: succeeded()
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - checkout: self
#
#   - task: NodeTool@0
#     inputs:
#       versionSpec: '18.x'
#     displayName: 'Install Node.js'
#
#   - script: |
#       # Identifiera formul√§r som har √§ndrats sedan senaste deploy
#       echo "üîç Identifierar formul√§r som beh√∂ver distribueras..."
#       cd forms
#       FORMS_TO_DEPLOY=$(find . -type d -name "hsq-forms-container-*" -maxdepth 1)
#       
#       # Loopa igenom formul√§r och bygga dem
#       for FORM_DIR in $FORMS_TO_DEPLOY; do
#         FORM_NAME=$(basename $FORM_DIR)
#         echo "üî® Bygger formul√§r: $FORM_NAME"
#         
#         cd $FORM_DIR
#         # Installera dependencies
#         npm ci
#         # Bygg React/statiska filer
#         npm run build
#         cd ..
#         
#         # Skapa artifact f√∂r varje formul√§r
#         mkdir -p $(Build.ArtifactStagingDirectory)/forms/$FORM_NAME
#         cp -r $FORM_DIR/build/* $(Build.ArtifactStagingDirectory)/forms/$FORM_NAME/
#       done
#     displayName: 'Build Forms'
#
#   - task: AzureStaticWebApp@0
#     inputs:
#       app_location: '/forms'
#       api_location: '' # Kan vara tom eftersom API redan √§r deployat separat
#       output_location: 'build'
#       azure_static_web_apps_api_token: $(AZURE_STATIC_WEB_APP_TOKEN)
#     displayName: 'Deploy Forms to Azure Static Web Apps'
