# HSQ Forms API - Azure DevOps Pipeline (Development)
# Pipeline f√∂r att bygga, testa och deploya HSQ Forms API p√• Azure App Service
# Denna pipeline √§r f√∂r utvecklingsmilj√∂n
# Uppdaterad och validerad: 2025-08-09

trigger:
  branches:
    include:
      - develop
  paths:
    include:
      - src/**
      - infra/**
      - main.py
      - requirements.txt
      - alembic/**
      - azure-pipelines-dev.yml
      - forms/**

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Environment settings
  environment: 'dev'
  projectName: 'hsq-forms'
  location: 'westeurope'
  pythonVersion: '3.11'
  subscriptionId: 'c0b03b12-570f-4442-b337-c9175ad4037f'
  resourceGroupName: 'rg-hsq-forms-dev'
  appServiceSku: 'B1'

stages:
- stage: Test
  displayName: 'Test Application'
  jobs:
  - job: TestCode
    displayName: 'Run Tests'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        # Installera pytest-asyncio f√∂r att hantera asynkrona tester
        pip install pytest-asyncio
      displayName: 'Install dependencies'

    - script: |
        echo "Running tests..."
        # K√∂r endast enhetstester som inte kr√§ver en k√∂rande server
        # Skip connection tests that require a running server
        python -m pytest tests/ -v --tb=native -k "not test_live_azure_storage_connection and not test_live_database_connection and not test_api" --ignore=tests/test_webhooks.py --ignore=tests/test_pytest_api.py
      displayName: 'Run unit tests'
      continueOnError: true

- stage: Deploy
  displayName: 'Deploy API'
  dependsOn: Test
  jobs:
  - job: DeployToAzure
    displayName: 'Deploy to Azure'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        echo "üì¶ Installerar jq f√∂r JSON-bearbetning..."
        sudo apt-get update && sudo apt-get install -y jq
      displayName: 'Install Required Tools'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - task: ArchiveFiles@2
      displayName: 'Create deployment package'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
        replaceExistingArchive: true
        verbose: true
        
    - task: AzureCLI@2
      displayName: 'Deploy to App Service'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Anv√§nd det befintliga App Service-namnet
          APP_SERVICE_NAME="hsq-forms-api-dev"
          RESOURCE_GROUP="$(resourceGroupName)"
          echo "üöÄ Deploying to existing App Service: $APP_SERVICE_NAME"
          
          # H√§mta publiceringsprofil f√∂r att anropa Kudu API
          echo "üîë H√§mtar publiceringsprofil..."
          PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles --name "$APP_SERVICE_NAME" --resource-group "$RESOURCE_GROUP" --xml)
          
          # Extrahera anv√§ndarnamn och l√∂senord fr√•n publiceringsprofil
          DEPLOY_USERNAME=$(echo "$PUBLISH_PROFILE" | grep -o '<publishProfile[^>]*userName="\([^"]*\)"' | head -1 | sed -e 's/.*userName="\([^"]*\)".*/\1/')
          DEPLOY_PASSWORD=$(echo "$PUBLISH_PROFILE" | grep -o '<publishProfile[^>]*userPWD="\([^"]*\)"' | head -1 | sed -e 's/.*userPWD="\([^"]*\)".*/\1/')
          
          # H√§mta App Service-information f√∂r att hitta korrekt URL
          echo "üîç H√§mtar information om App Service..."
          APP_INFO=$(az webapp show --name "$APP_SERVICE_NAME" --resource-group "$RESOURCE_GROUP")
          DEFAULT_HOSTNAME=$(echo "$APP_INFO" | jq -r '.defaultHostName')
          
          # Extrahera suffixet fr√•n default hostname f√∂r att skapa SCM URL
          SCM_HOSTNAME="${DEFAULT_HOSTNAME/.azurewebsites.net/.scm.azurewebsites.net}"
          
          echo "  - Default Hostname: $DEFAULT_HOSTNAME"
          echo "  - SCM Hostname: $SCM_HOSTNAME"
          
          KUDU_DEPLOY_URL="https://$SCM_HOSTNAME/api/zipdeploy"
          
          echo "üöÄ Deploying application package..."
          echo "  - Package size: $(du -h $(Build.ArtifactStagingDirectory)/app.zip | cut -f1)"
          
          # Anv√§nd curl f√∂r att g√∂ra en POST-f√∂rfr√•gan till Kudu API med deploy credentials
          curl -X POST -u "$DEPLOY_USERNAME:$DEPLOY_PASSWORD" \
               --data-binary "@$(Build.ArtifactStagingDirectory)/app.zip" \
               "$KUDU_DEPLOY_URL"
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Deployment package uploaded successfully!"
          else
            echo "‚ùå Failed to upload deployment package."
            exit 1
          fi
          
          # V√§nta p√• att App Service ska starta om och till√§mpa √§ndringarna
          echo "‚è≥ V√§ntar p√• att App Service ska starta om..."
          sleep 30
          
          # K√∂r databasmigrering via Kudu API
          echo "üîÑ K√∂r databasmigrering..."
          KUDU_COMMAND_URL="https://$SCM_HOSTNAME/api/command"
          
          MIGRATION_COMMAND='cd site/wwwroot && alembic upgrade head'
          
          # Anropa Kudu API f√∂r att k√∂ra migreringskommandot
          curl -X POST -u "$DEPLOY_USERNAME:$DEPLOY_PASSWORD" "$KUDU_COMMAND_URL" \
               -H "Content-Type: application/json" \
               -d "{\"command\":\"$MIGRATION_COMMAND\",\"dir\":\"\"}"
          
          # Verifiera att App Service √§r tillg√§nglig via HTTP
          echo "üåê Kontrollerar om API:et √§r tillg√§ngligt..."
          RESPONSE_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$DEFAULT_HOSTNAME/docs")
          
          echo "API response code: $RESPONSE_CODE"
          if [[ "$RESPONSE_CODE" == "200" || "$RESPONSE_CODE" == "401" || "$RESPONSE_CODE" == "403" ]]; then
            echo "‚úÖ API √§r tillg√§ngligt!"
          else
            echo "‚ö†Ô∏è API verkar inte vara tillg√§ngligt (svarade med $RESPONSE_CODE)."
            echo "   Detta kan bero p√• VNet-begr√§nsningar och √§r f√∂rv√§ntat. Forts√§tter √§nd√•."
          fi

- stage: FormOperations
  displayName: 'Form Operations'
  dependsOn: Deploy
  jobs:
  - job: BuildForms
    displayName: 'Build Forms'
    steps:
    - checkout: self
    
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
    
    - script: |
        # Kontrollera om formul√§rmappen finns
        if [ -d "forms" ]; then
          # Lista alla formul√§r
          FORMS=$(find forms -type d -name "hsq-forms-container-*")
          
          if [ -n "$FORMS" ]; then
            echo "üìã Tillg√§ngliga formul√§r:"
            find forms -type d -name "hsq-forms-container-*" -exec basename {} \;
            
            echo "üì¶ Bygger formul√§r..."
            
            for FORM_PATH in $FORMS; do
              FORM_NAME=$(basename $FORM_PATH)
              echo "üî® Bygger $FORM_NAME..."
              
              # Navigera till formul√§rmappen
              cd $FORM_PATH
              
              # Skapa .env.production med API-slutpunkt
              echo "VITE_API_URL=https://hsq-forms-dev-e8g5hhgpfwgabsg5.a03.azurefd.net" > .env.production
              echo "VITE_API_KEY_HEADER_NAME=X-API-Key" >> .env.production
              echo "VITE_API_KEY=dev-api-key-1" >> .env.production
              
              # Installera och bygg
              npm install
              npm run build
              
              # Kopiera build-mappen till artifact staging directory
              mkdir -p $(Build.ArtifactStagingDirectory)/forms/$FORM_NAME
              cp -r dist/* $(Build.ArtifactStagingDirectory)/forms/$FORM_NAME/
              
              # √Öterv√§nd till roten
              cd $(Build.SourcesDirectory)
            done
            
            echo "‚úÖ Alla formul√§r byggda!"
          else
            echo "‚ö†Ô∏è Inga formul√§r hittades i 'forms/'-mappen"
          fi
        else
          echo "‚ö†Ô∏è Mappen 'forms/' hittades inte"
        fi
      displayName: 'Build Forms'
      
    - publish: $(Build.ArtifactStagingDirectory)/forms
      artifact: forms
      displayName: 'Publish Forms Artifacts'
      
  - job: DeployForms
    displayName: 'Deploy Forms to Static Web Apps'
    dependsOn: BuildForms
    condition: succeeded()
    steps:
    - download: current
      artifact: forms
      displayName: 'Download Forms Artifacts'
      
    - task: AzureCLI@2
      displayName: 'Deploy Forms to Static Web Apps'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "üöÄ F√∂rbereder f√∂r deployment av formul√§r..."
          
          # B2C Returns
          if [ -d "$(Pipeline.Workspace)/forms/hsq-forms-container-b2c-returns" ]; then
            echo "üöÄ Deploying B2C Returns formul√§r..."
            az staticwebapp deploy \
              --source $(Pipeline.Workspace)/forms/hsq-forms-container-b2c-returns \
              --deployment-token $(AZURE_STATIC_WEB_APP_TOKEN_B2C_RETURNS) \
              --no-build
          fi
          
          # B2B Support
          if [ -d "$(Pipeline.Workspace)/forms/hsq-forms-container-b2b-support" ]; then
            echo "üöÄ Deploying B2B Support formul√§r..."
            az staticwebapp deploy \
              --source $(Pipeline.Workspace)/forms/hsq-forms-container-b2b-support \
              --deployment-token $(AZURE_STATIC_WEB_APP_TOKEN_B2B_SUPPORT) \
              --no-build
          fi
          
          # B2B Feedback
          if [ -d "$(Pipeline.Workspace)/forms/hsq-forms-container-b2b-feedback" ]; then
            echo "üöÄ Deploying B2B Feedback formul√§r..."
            az staticwebapp deploy \
              --source $(Pipeline.Workspace)/forms/hsq-forms-container-b2b-feedback \
              --deployment-token $(AZURE_STATIC_WEB_APP_TOKEN_B2B_FEEDBACK) \
              --no-build
          fi
          
          # B2B Returns
          if [ -d "$(Pipeline.Workspace)/forms/hsq-forms-container-b2b-returns" ]; then
            echo "üöÄ Deploying B2B Returns formul√§r..."
            az staticwebapp deploy \
              --source $(Pipeline.Workspace)/forms/hsq-forms-container-b2b-returns \
              --deployment-token $(AZURE_STATIC_WEB_APP_TOKEN_B2B_RETURNS) \
              --no-build
          fi

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - task: ArchiveFiles@2
      displayName: 'Create deployment package'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
        replaceExistingArchive: true
        verbose: true

    - script: |
        echo "Deploying to Azure App Service"
      displayName: 'Mock deployment'
