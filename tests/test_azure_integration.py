#!/usr/bin/env python3
"""
Test script f√∂r Azure Storage integration
K√∂r detta f√∂r att validera att Azure Storage fungerar korrekt
"""
import asyncio
import os
import tempfile
import logging
from fastapi import UploadFile
from pathlib import Path

# Konfigurera logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def test_azure_storage():
    """
    Test Azure Storage Service integration
    """
    print("üß™ Testing Azure Storage Integration...")
    
    # S√§tt test milj√∂variabler (anv√§nd fake v√§rden f√∂r test)
    test_env = {
        "AZURE_STORAGE_ACCOUNT_NAME": "testaccount",
        "AZURE_STORAGE_CONTAINER_NAME": "test-uploads",
        "AZURE_STORAGE_TEMP_CONTAINER_NAME": "test-temp",
        "FORCE_AZURE_STORAGE": "false"  # Anv√§nd lokal storage f√∂r test
    }
    
    for key, value in test_env.items():
        os.environ[key] = value
    
    try:
        # Importera storage service
        print("üì¶ Importing storage services...")
        from app.routers.files import get_storage_service
        
        # H√§mta storage service
        storage_service, use_azure = get_storage_service()
        print(f"‚úÖ Storage service initialized: {'Azure' if use_azure else 'Local'}")
        
        # Skapa test fil
        print("üìÑ Creating test file...")
        test_content = b"Test file content for HSQ Forms API"
        test_filename = "test_file.txt"
        
        # Skapa en mock UploadFile
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            temp_file.write(test_content)
            temp_file.flush()
            
            # Simulera UploadFile
            class MockUploadFile:
                def __init__(self, filename, content):
                    self.filename = filename
                    self.content = content
                    
                async def read(self):
                    return self.content
            
            mock_file = MockUploadFile(test_filename, test_content)
            test_submission_id = "test-submission-123"
            
            # Test upload
            print("‚¨ÜÔ∏è  Testing file upload...")
            file_id, file_size, content_type = await storage_service.upload_file(mock_file, test_submission_id)
            print(f"‚úÖ Upload successful: {file_id}, size: {file_size}, type: {content_type}")
            
            # Test get file
            print("‚¨áÔ∏è  Testing file download...")
            if use_azure:
                result = await storage_service.get_file(file_id)
                downloaded_content, downloaded_type, metadata = result
            else:
                result = await storage_service.get_file(file_id, test_submission_id)
                if result:
                    downloaded_content, downloaded_type, _ = result
                else:
                    raise Exception("File not found")
            
            assert downloaded_content == test_content, "Content mismatch!"
            print(f"‚úÖ Download successful: {len(downloaded_content)} bytes, type: {downloaded_type}")
            
            # Test delete
            print("üóëÔ∏è  Testing file deletion...")
            if use_azure:
                success = await storage_service.delete_file(file_id)
            else:
                success = await storage_service.delete_file(file_id, test_submission_id)
            
            print(f"‚úÖ Delete successful: {success}")
            
            # Cleanup temp file
            os.unlink(temp_file.name)
        
        print("üéâ All tests passed! Azure Storage integration is working correctly.")
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        print("üí° This is expected if Azure dependencies are missing in development")
        return False
    except Exception as e:
        print(f"‚ùå Test failed: {e}")
        logger.exception("Full error details:")
        return False

async def test_config():
    """
    Test configuration loading
    """
    print("üîß Testing configuration...")
    
    try:
        from app.config import get_settings
        settings = get_settings()
        
        print(f"‚úÖ Configuration loaded:")
        print(f"   - Environment: {settings.environment}")
        print(f"   - Database URL: {'Set' if settings.database_url else 'Not set'}")
        print(f"   - Use Azure Storage: {settings.use_azure_storage}")
        print(f"   - Azure Storage Account: {settings.azure_storage_account_name or 'Not set'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ HSQ Forms API - Azure Integration Test")
    print("=" * 50)
    
    # √Ñndra till project root f√∂r korrekt import
    script_dir = Path(__file__).parent
    app_dir = script_dir / "apps" / "app"
    
    if not app_dir.exists():
        print(f"‚ùå Could not find app directory at {app_dir}")
        print("üí° Please run this script from the project root directory")
        exit(1)
    
    os.chdir(app_dir)
    
    async def run_tests():
        # Test configuration first
        config_ok = await test_config()
        
        # Test storage integration
        storage_ok = await test_azure_storage()
        
        print("\n" + "=" * 50)
        if config_ok and storage_ok:
            print("üéâ All integration tests passed!")
            print("‚úÖ Ready for Azure deployment")
        else:
            print("‚ö†Ô∏è  Some tests failed, but this may be expected in development")
            print("üí° Run 'azd up' to deploy to Azure for full testing")
    
    asyncio.run(run_tests())
