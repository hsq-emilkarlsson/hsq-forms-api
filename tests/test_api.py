#!/usr/bin/env python3"""Test script for HSQ Forms APIThis script demonstrates creating form templates and submitting form data"""import requestsimport jsonimport sysimport timefrom typing import Dict, Any# ConfigurationAPI_URL = "http://localhost:8001"PROJECT_NAME = "test-project"def print_header(message: str) -> None:    """Print a formatted header message"""    print(f"\n{'=' * 50}")    print(f"  {message}")    print(f"{'=' * 50}\n")def create_form_template() -> Dict[str, Any]:    """Create a test form template"""    print_header("Creating Form Template")        template_data = {        "title": "Contact Form",        "description": "Simple contact form for testing",        "project_id": PROJECT_NAME,        "schema": {            "fields": [                {                    "name": "name",                    "label": "Name",                     "type": "text",                    "required": True,                    "placeholder": "Your full name"                },                {                    "name": "email",                    "label": "Email",                    "type": "email",                     "required": True,                    "placeholder": "Your email address"                },                {                    "name": "message",                    "label": "Message",                    "type": "textarea",                    "required": True,                    "placeholder": "Write your message here"                },                {                    "name": "company",                    "label": "Company",                    "type": "text",                    "required": False,                    "placeholder": "Your company (optional)"                }            ]        },        "settings": {            "submit_button_text": "Send Message",            "success_message": "Thank you for contacting us!",            "store_submissions": True        }    }        try:        response = requests.post(f"{API_URL}/api/forms/templates", json=template_data)        response.raise_for_status()                template = response.json()        print("✅ Form template created successfully!")        print(f"Template ID: {template['id']}")        print(f"Template Title: {template['title']}")        return template            except requests.RequestException as e:        print(f"❌ Error creating form template: {e}")        print(f"Response: {e.response.text if hasattr(e, 'response') else 'No response'}")        sys.exit(1)def submit_form_data(template_id: str) -> Dict[str, Any]:    """Submit test data to the form template"""    print_header("Submitting Form Data")        form_data = {        "data": {            "name": "John Doe",            "email": "john.doe@example.com",            "message": "Hello, I'm interested in your services. Can you please contact me?",            "company": "Acme Corporation"        }    }        try:        response = requests.post(            f"{API_URL}/api/forms/templates/{template_id}/submit",            json=form_data        )        response.raise_for_status()                result = response.json()        print("✅ Form submitted successfully!")        print(f"Submission ID: {result['submission_id']}")        print(f"Submitted at: {result['submitted_at']}")        return result            except requests.RequestException as e:        print(f"❌ Error submitting form: {e}")        print(f"Response: {e.response.text if hasattr(e, 'response') else 'No response'}")        sys.exit(1)def test_legacy_form_submission() -> Dict[str, Any]:    """Test the legacy form submission endpoint"""    print_header("Testing Legacy Form Submission")        form_data = {        "form_type": "contact",        "name": "Jane Smith",        "email": "jane.smith@example.com",        "message": "This is a test of the legacy form submission API",        "metadata": {            "company": "Test Company",            "phone": "+46701234567"        }    }        try:        response = requests.post(f"{API_URL}/submit", json=form_data)        response.raise_for_status()                result = response.json()        print("✅ Legacy form submitted successfully!")        print(f"Submission ID: {result['submission_id']}")        return result            except requests.RequestException as e:        print(f"❌ Error submitting legacy form: {e}")        print(f"Response: {e.response.text if hasattr(e, 'response') else 'No response'}")        return Nonedef check_api_health() -> bool:    """Check if the API is running and healthy"""    try:        response = requests.get(f"{API_URL}/")        if response.status_code == 200:            info = response.json()            print(f"✅ API is running - {info['message']} (v{info['version']})")            return True        else:            print(f"❌ API returned status code {response.status_code}")            return False    except requests.RequestException:        print(f"❌ Could not connect to API at {API_URL}")        return Falsedef main() -> None:    """Main test function"""    print_header("HSQ Forms API Test")        # Check API health    if not check_api_health():        print("Make sure the API is running with 'docker-compose up'")        sys.exit(1)        # Add a small delay    time.sleep(1)        # Test flexible forms API    template = create_form_template()    time.sleep(1)    submission = submit_form_data(template['id'])        # Test legacy form submission    time.sleep(1)    legacy_submission = test_legacy_form_submission()        print_header("All Tests Completed Successfully")    print("✅ Flexible Forms API working correctly")    if legacy_submission:        print("✅ Legacy Forms API working correctly")    else:        print("⚠️ Legacy Forms API test failed")if __name__ == "__main__":    main()