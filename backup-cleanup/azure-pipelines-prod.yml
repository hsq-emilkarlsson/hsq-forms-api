# üöÄ HSQ Forms API - Azure DevOps Pipeline (Production)
# Pipeline f√∂r att bygga, testa och deploya HSQ Forms API p√• Azure App Service
# Denna pipeline √§r f√∂r produktionsmilj√∂n

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/**
      - infra/**
      - main.py
      - requirements.txt
      - alembic/**
      - azure-pipelines-prod.yml

variables:
  # Environment settings
  environment: 'prod'
  projectName: 'hsq-forms'
  location: 'westeurope'
  pythonVersion: '3.11'
  subscriptionId: 'c0b03b12-570f-4442-b337-c9175ad4037f'
  resourceGroupName: 'rg-hsq-forms-prod'
  appServiceSku: 'P1V2'

stages:
- stage: Test
  displayName: 'Test Application'
  jobs:
  - job: TestCode
    displayName: 'Run Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
      displayName: 'Install dependencies'
    
    - script: |
        export SKIP_API_TESTS=true
        python -m pytest tests/ -v --tb=short
      displayName: 'Run tests'
      continueOnError: false

- stage: Approval
  displayName: 'Production Deployment Approval'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - job: WaitForValidation
    displayName: 'Wait for Production Approval'
    pool: server
    timeoutInMinutes: 4320 # 3 days
    steps:
    - task: ManualValidation@0
      displayName: 'Manual Validation'
      inputs:
        notifyUsers: ''
        instructions: 'Please validate the build and approve to deploy to Production'
        onTimeout: 'reject'

- stage: Infrastructure
  displayName: 'Deploy Infrastructure'
  dependsOn: Approval
  condition: succeeded()
  jobs:
  - job: DeployInfrastructure
    displayName: 'Deploy Azure Resources'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: AzureResourceManagerTemplateDeployment@3
      displayName: 'Deploy Bicep Template'
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        subscriptionId: '$(subscriptionId)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'infra/bicep/main.bicep'
        csmParametersFile: 'infra/bicep/main.parameters.json'
        overrideParameters: >-
          -environmentName $(environment)
          -projectName $(projectName)
          -dbAdminUsername $(dbAdminUsername)
          -dbAdminPassword $(dbAdminPassword)
          -appServiceSku $(appServiceSku)
        deploymentMode: 'Incremental'
        deploymentName: 'hsq-forms-$(environment)-$(Build.BuildNumber)'
    
    - task: AzureCLI@2
      displayName: 'List Deployed Resources'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          echo "‚úÖ Infrastructure deployment completed"
          echo "üìã Checking deployed resources..."
          az resource list --resource-group $(resourceGroupName) --output table

- stage: DeployApp
  displayName: 'Deploy Application'
  dependsOn: Infrastructure
  condition: succeeded()
  jobs:
  - job: DeployToAppService
    displayName: 'Deploy to App Service'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self
    
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'
    
    - script: |
        # Create deployment package
        echo "üì¶ Creating deployment package..."
        mkdir -p $(Build.ArtifactStagingDirectory)/app
        cp -r src/ main.py alembic/ alembic.ini requirements.txt $(Build.ArtifactStagingDirectory)/app/
        cd $(Build.ArtifactStagingDirectory)
        zip -r app.zip app/
      displayName: 'Prepare Deployment Package'
    
    - task: AzureWebApp@1
      displayName: 'Deploy to Azure App Service'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        appType: 'webAppLinux'
        appName: '$(projectName)-api-$(environment)-*'
        package: '$(Build.ArtifactStagingDirectory)/app.zip'
        runtimeStack: 'PYTHON|3.11'
        startUpCommand: 'gunicorn main:app --workers 2 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000'
    
    - task: AzureCLI@2
      displayName: 'Run Database Migrations'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get App Service name with wildcard pattern
          echo "üîç Finding App Service..."
          APP_SERVICE_NAME=$(az webapp list --resource-group $(resourceGroupName) --query "[?starts_with(name, '$(projectName)-api-$(environment)')].name" -o tsv)
          
          if [ -z "$APP_SERVICE_NAME" ]; then
            echo "‚ùå Could not find App Service with name pattern '$(projectName)-api-$(environment)-*'"
            exit 1
          fi
          
          echo "üîé Found App Service: $APP_SERVICE_NAME"
          
          # Get connection string from App Service settings
          echo "üîÑ Running database migrations..."
          CONNECTION_STRING=$(az webapp config appsettings list --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --query "[?name=='SQLALCHEMY_DATABASE_URI'].value" -o tsv)
          
          # Run migrations
          pip install -r requirements.txt
          export SQLALCHEMY_DATABASE_URI="$CONNECTION_STRING"
          python -m alembic upgrade head
          
          echo "‚úÖ Deployment successful! Application available at: https://$APP_SERVICE_NAME.azurewebsites.net/"

- stage: Monitoring
  displayName: 'Post-Deployment Monitoring'
  dependsOn: DeployApp
  condition: succeeded()
  jobs:
  - job: MonitorDeployment
    displayName: 'Monitor Production Deployment'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      displayName: 'Verify Deployment'
      inputs:
        azureSubscription: 'SCON-HAZE-01AA-APP1066-Dev-Martechlab'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Get App Service name with wildcard pattern
          APP_SERVICE_NAME=$(az webapp list --resource-group $(resourceGroupName) --query "[?starts_with(name, '$(projectName)-api-$(environment)')].name" -o tsv)
          
          # Check App Service Status
          echo "üîç Checking App Service status..."
          STATUS=$(az webapp show --name "$APP_SERVICE_NAME" --resource-group $(resourceGroupName) --query "state" -o tsv)
          echo "üìä App Service Status: $STATUS"
          
          # Check App Service URL
          echo "üåê Checking App Service URL..."
          APP_URL="https://$APP_SERVICE_NAME.azurewebsites.net/"
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL")
          echo "üîó URL Status: $HTTP_STATUS"
          
          if [ "$STATUS" != "Running" ] || [ "$HTTP_STATUS" != "200" ]; then
            echo "‚ö†Ô∏è Warning: App Service may not be running correctly. Manual verification recommended."
          else
            echo "‚úÖ App Service is running correctly!"
          fi
          
          echo "üìä Deployment monitoring complete!"
