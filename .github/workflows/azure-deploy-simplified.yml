name: Deploy to Azure Container Apps (Simplified)

on:
  push:
    branches: [ develop ]
  workflow_dispatch:  # Allows manual triggering

env:
  # Common settings
  AZURE_SUBSCRIPTION: c0b03b12-570f-4442-b337-c9175ad4037f
  
  # Development environment
  DEV_REGISTRY: hsqformsdevacr.azurecr.io
  DEV_IMAGE_NAME: hsq-forms-api-dev
  DEV_RESOURCE_GROUP: rg-hsq-forms-dev
  DEV_CONTAINER_APP: hsq-forms-api-dev

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-asyncio
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        SECRET_KEY: test-secret-key
        TESTING: "true"
        SKIP_API_TESTS: "true"
      run: |
        python -m pytest tests/test_webhooks.py -v  # Kör endast webhook-tester som inte kräver API

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Logga in på Azure med Service Principal
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
      continue-on-error: true
        
    - name: Fallback Azure login with client credentials if AZURE_CREDENTIALS JSON fails
      if: ${{ failure() }}
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ env.AZURE_SUBSCRIPTION }}
    
    # Hämta ACR access token för att kunna logga in på ACR
    - name: Get ACR Access Token
      id: get-acr-token
      run: |
        TOKEN=$(az acr login --name ${{ env.DEV_REGISTRY }} --expose-token --output tsv --query accessToken)
        echo "::add-mask::$TOKEN"
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
    
    # Logga in på ACR med token
    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DEV_REGISTRY }}
        username: 00000000-0000-0000-0000-000000000000
        password: ${{ steps.get-acr-token.outputs.token }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DEV_REGISTRY }}/${{ env.DEV_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix=sha-
          type=raw,value=latest
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        build-args: |
          ENVIRONMENT=development
    
    - name: Deploy to Container App
      uses: azure/CLI@v1
      with:
        inlineScript: |
          echo "Deploying to Container App..."
          az containerapp update \
            --subscription ${{ env.AZURE_SUBSCRIPTION }} \
            --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
            --name ${{ env.DEV_CONTAINER_APP }} \
            --image ${{ steps.meta.outputs.tags }}
          
          echo "Verifying deployment..."
          REVISION=$(az containerapp revision list \
            --subscription ${{ env.AZURE_SUBSCRIPTION }} \
            --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
            --name ${{ env.DEV_CONTAINER_APP }} \
            --query "[0].name" -o tsv)
          echo "Latest revision: $REVISION"
          
          # Vänta på att container app ska bli redo
          echo "Waiting for container app to be ready..."
          az containerapp revision show \
            --subscription ${{ env.AZURE_SUBSCRIPTION }} \
            --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
            --name ${{ env.DEV_CONTAINER_APP }} \
            --revision $REVISION \
            --query "properties.status" -o tsv
          
          echo "✅ Dev deployment successful!"
