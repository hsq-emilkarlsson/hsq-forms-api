name: Deploy Form Feedback App to Azure

on:
  push:
    branches: [ main ]
    paths:
      - 'apps/form-feedback/**'
      - '.github/workflows/deploy-form-feedback.yml'
  pull_request:
    types: [ opened, synchronize, reopened, closed ]
    branches: [ main ]
    paths:
      - 'apps/form-feedback/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  NODE_VERSION: '18.x'
  APP_LOCATION: 'apps/form-feedback'
  OUTPUT_LOCATION: 'dist'
  APP_NAME: 'Husqvarna Form Feedback'

jobs:
  build_and_deploy:
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs: false
      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.APP_LOCATION }}/package-lock.json'
      - name: Install dependencies
        working-directory: ${{ env.APP_LOCATION }}
        run: npm ci
      - name: Lint code
        working-directory: ${{ env.APP_LOCATION }}
        run: npm run lint || echo "Linting issues found, but continuing build"
      - name: Build application
        working-directory: ${{ env.APP_LOCATION }}
        run: |
          echo "Starting build process..."
          
          # Clean any previous build artifacts
          rm -rf dist
          
          # Ensure the correct entry point files exist
          if [ ! -f "src/main.tsx" ]; then
            echo "ERROR: Missing required entry point file src/main.tsx"
            exit 1
          fi
          
          if [ ! -f "index.html" ]; then
            echo "ERROR: Missing required index.html file"
            exit 1
          fi
          
          # Build the application
          VITE_DEBUG=true npm run build
          
          # Extra check for invalid file references
          if grep -r "src/main" dist; then
            echo "WARNING: Found references to source files in build output"
          else
            echo "✅ No direct references to source files found in build output (good!)"
          fi
          
          echo "Build completed successfully."
      - name: Verify build output
        working-directory: ${{ env.APP_LOCATION }}
        run: |
          echo "Verifying build output..."
          if [ ! -d "${{ env.OUTPUT_LOCATION }}" ]; then
            echo "Error: Output directory '${{ env.OUTPUT_LOCATION }}' not found!"
            exit 1
          fi
          if [ ! -f "${{ env.OUTPUT_LOCATION }}/index.html" ]; then
            echo "Error: index.html not found in output directory!"
            exit 1
          fi
          echo "--- Build Output Directory Structure ---"
          ls -la ${{ env.OUTPUT_LOCATION }}
          echo "--- JavaScript Asset Check ---"
          JS_FILES=$(find ${{ env.OUTPUT_LOCATION }}/assets -name "*.js" | wc -l)
          if [ "$JS_FILES" -eq "0" ]; then
            echo "ERROR: No JavaScript files found in assets directory!"
            exit 1
          else
            echo "✅ Found $JS_FILES JavaScript files in assets directory"
            ls -la ${{ env.OUTPUT_LOCATION }}/assets/*.js
          fi
          echo "--- Critical Files Check ---"
          echo "index.html exists: $(test -f ${{ env.OUTPUT_LOCATION }}/index.html && echo 'Yes' || echo 'No')"
          echo "staticwebapp.config.json exists: $(test -f ${{ env.OUTPUT_LOCATION }}/staticwebapp.config.json && echo 'Yes' || echo 'No')"
          echo "routes.json exists: $(test -f ${{ env.OUTPUT_LOCATION }}/routes.json && echo 'Yes' || echo 'No')"
          echo "--- Checking index.html for script references ---"
          if grep -q "src=\"/assets/" ${{ env.OUTPUT_LOCATION }}/index.html; then
            echo "✅ index.html correctly references assets"
          else
            echo "WARNING: index.html might not reference assets correctly"
            echo "Content of index.html:"
            cat ${{ env.OUTPUT_LOCATION }}/index.html
          fi
      - name: Check for MIME type configurations
        working-directory: ${{ env.APP_LOCATION }}
        run: |
          echo "Checking MIME type configurations..."
          
          # Check staticwebapp.config.json for proper MIME settings
          if [ -f "${{ env.OUTPUT_LOCATION }}/staticwebapp.config.json" ]; then
            if grep -q "application/javascript" "${{ env.OUTPUT_LOCATION }}/staticwebapp.config.json"; then
              echo "✅ staticwebapp.config.json has JavaScript MIME type set correctly"
            else
              echo "WARNING: staticwebapp.config.json may not have JavaScript MIME type set correctly"
            fi
          fi
          
          # Check routes.json for proper configurations if it exists
          if [ -f "${{ env.OUTPUT_LOCATION }}/routes.json" ]; then
            if grep -q "application/javascript" "${{ env.OUTPUT_LOCATION }}/routes.json"; then
              echo "✅ routes.json has JavaScript MIME type set correctly"
            else
              echo "WARNING: routes.json may not have JavaScript MIME type set correctly"
            fi
          fi
          
          # Critical check: Make sure no .tsx files are referenced directly in built files
          echo "Checking for direct .tsx references in build output..."
          if find ${{ env.OUTPUT_LOCATION }} -name "*.html" -o -name "*.js" -o -name "*.css" | xargs grep -l "\.tsx" 2>/dev/null; then
            echo "⛔ ERROR: Found direct references to .tsx files in the build output!"
            echo "This will cause white screen issues in production."
            echo "Files with .tsx references:"
            find ${{ env.OUTPUT_LOCATION }} -name "*.html" -o -name "*.js" -o -name "*.css" | xargs grep -l "\.tsx" 2>/dev/null || true
            exit 1
          else
            echo "✅ No direct references to .tsx files found in build output"
          fi

      - name: Deploy to Azure Static Web Apps
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ICY_FLOWER_030D4AC03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: ${{ env.APP_LOCATION }}/${{ env.OUTPUT_LOCATION }}
          api_location: ""
          output_location: ""
          skip_app_build: true
      - name: Post-deployment verification
        if: steps.deploy.outcome == 'success'
        run: |
          echo "Deployment completed successfully"
          echo "App URL: https://icy-flower-030d4ac03.6.azurestaticapps.net"
          echo "Please verify the application is working as expected"
      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed. Please check the logs for more information."
          echo "Common issues:"
          echo "1. Build failures (check npm build logs)"
          echo "2. Azure Static Web Apps configuration issues"
          echo "3. Missing or incorrect environment variables"

  close_pull_request:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Environment
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ICY_FLOWER_030D4AC03 }}
          action: "close"
          app_location: ${{ env.APP_LOCATION }}
