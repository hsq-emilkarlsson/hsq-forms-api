name: Deploy to Azure Container Apps

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

env:
  # Common settings
  AZURE_SUBSCRIPTION: c0b03b12-570f-4442-b337-c9175ad4037f
  
  # Development environment
  DEV_REGISTRY: hsqformsdevacr.azurecr.io
  DEV_IMAGE_NAME: hsq-forms-api-dev
  DEV_RESOURCE_GROUP: rg-hsq-forms-dev
  DEV_CONTAINER_APP: hsq-forms-api-dev
  
  # Production environment
  PROD_REGISTRY: hsqformsprodacr.azurecr.io
  PROD_IMAGE_NAME: hsq-forms-api
  PROD_RESOURCE_GROUP: rg-hsq-forms-prod
  PROD_CONTAINER_APP: hsq-forms-api

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install pytest-asyncio
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb
        SECRET_KEY: test-secret-key
        TESTING: "true"
        SKIP_API_TESTS: "true"
      run: |
        python -m pytest tests/test_webhooks.py -v  # Kör endast webhook-tester som inte kräver API

  build-and-push-dev:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Azure CLI Login (Dev)
      run: |
        # Installera jq om det inte redan finns
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

        # Försök logga in med direkt angivna uppgifter om de finns
        if [[ -n "${{ secrets.AZURE_CLIENT_ID }}" && -n "${{ secrets.AZURE_TENANT_ID }}" && -n "${{ secrets.AZURE_CLIENT_SECRET }}" ]]; then
          echo "Logging in with explicit client credentials"
          az login --service-principal --username "${{ secrets.AZURE_CLIENT_ID }}" --tenant "${{ secrets.AZURE_TENANT_ID }}" --password "${{ secrets.AZURE_CLIENT_SECRET }}"
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with explicit credentials"
        # Om det inte finns explicita uppgifter, försök med AZURE_CREDENTIALS JSON
        elif [[ -n "${{ secrets.AZURE_CREDENTIALS }}" ]]; then
          echo "Trying to login with AZURE_CREDENTIALS JSON"
          # Skapa temporär fil för JSON-data
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          
          # Kontrollera att JSON-filen är giltig
          if ! jq . azure_credentials.json > /dev/null 2>&1; then
            echo "Error: AZURE_CREDENTIALS is not valid JSON"
            cat azure_credentials.json
            rm azure_credentials.json
            exit 1
          fi
          
          # Extrahera värden och logga in
          CLIENT_ID=$(jq -r '.clientId // .appId' azure_credentials.json)
          CLIENT_SECRET=$(jq -r '.clientSecret // .password' azure_credentials.json)
          TENANT_ID=$(jq -r '.tenantId' azure_credentials.json)
          
          if [[ -z "$CLIENT_ID" || -z "$CLIENT_SECRET" || -z "$TENANT_ID" || "$CLIENT_ID" == "null" || "$CLIENT_SECRET" == "null" || "$TENANT_ID" == "null" ]]; then
            echo "Error: Could not extract required values from AZURE_CREDENTIALS"
            echo "Make sure AZURE_CREDENTIALS contains clientId/appId, clientSecret/password, and tenantId"
            rm azure_credentials.json
            exit 1
          fi
          
          # Försök logga in
          az login --service-principal --username "$CLIENT_ID" --password "$CLIENT_SECRET" --tenant "$TENANT_ID"
          LOGIN_STATUS=$?
          
          # Ta bort den temporära filen
          rm azure_credentials.json
          
          if [[ $LOGIN_STATUS -ne 0 ]]; then
            echo "Failed to login with AZURE_CREDENTIALS JSON"
            exit 1
          fi
          
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with AZURE_CREDENTIALS JSON"
        else
          echo "No valid Azure credentials found. Please set either AZURE_CREDENTIALS JSON or individual AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET."
          exit 1
        fi
    
    # Hämta ACR access token för att kunna logga in på ACR
    - name: Get ACR Access Token
      id: get-acr-token
      run: |
        # Kontrollera om vi redan är inloggad i Azure
        if ! az account show &>/dev/null; then
          echo "Not logged in to Azure CLI. Cannot get ACR token."
          exit 1
        fi
        
        # Försök hämta token med fallback för felhantering
        set +e  # Tillåt kommandon att misslyckas utan att avsluta skriptet
        TOKEN=$(az acr login --name ${{ env.DEV_REGISTRY }} --expose-token --output tsv --query accessToken 2>/dev/null)
        ACR_STATUS=$?
        set -e  # Återställ normal felhantering
        
        if [[ $ACR_STATUS -ne 0 || -z "$TOKEN" ]]; then
          echo "Failed to get ACR token directly. Trying with managed identity..."
          
          # Försök med managed identity
          MANAGED_TOKEN=$(az account get-access-token --resource https://management.azure.com/ --query accessToken -o tsv)
          if [[ -n "$MANAGED_TOKEN" ]]; then
            echo "Got managed identity token. Using it for ACR access."
            TOKEN=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $MANAGED_TOKEN" \
                  "https://management.azure.com/subscriptions/${{ env.AZURE_SUBSCRIPTION }}/resourceGroups/${{ env.DEV_RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/$(echo ${{ env.DEV_REGISTRY }} | cut -d. -f1)/listCredentials?api-version=2023-01-01-preview" | \
                  jq -r '.accessToken')
          fi
        fi
        
        if [[ -z "$TOKEN" ]]; then
          echo "Could not obtain ACR token. Exiting."
          exit 1
        fi
        
        echo "::add-mask::$TOKEN"
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
    
    # Logga in på ACR med token
    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.DEV_REGISTRY }}
        username: 00000000-0000-0000-0000-000000000000
        password: ${{ steps.get-acr-token.outputs.token }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DEV_REGISTRY }}/${{ env.DEV_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=raw,value=latest
    
    - name: Build and push Docker image for DEV
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        build-args: |
          ENVIRONMENT=development

  build-and-push-prod:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Azure CLI Login (Prod)
      run: |
        # Installera jq om det inte redan finns
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

        # Försök logga in med direkt angivna uppgifter om de finns
        if [[ -n "${{ secrets.AZURE_CLIENT_ID }}" && -n "${{ secrets.AZURE_TENANT_ID }}" && -n "${{ secrets.AZURE_CLIENT_SECRET }}" ]]; then
          echo "Logging in with explicit client credentials"
          az login --service-principal --username "${{ secrets.AZURE_CLIENT_ID }}" --tenant "${{ secrets.AZURE_TENANT_ID }}" --password "${{ secrets.AZURE_CLIENT_SECRET }}"
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with explicit credentials"
        # Om det inte finns explicita uppgifter, försök med AZURE_CREDENTIALS JSON
        elif [[ -n "${{ secrets.AZURE_CREDENTIALS }}" ]]; then
          echo "Trying to login with AZURE_CREDENTIALS JSON"
          # Skapa temporär fil för JSON-data
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          
          # Kontrollera att JSON-filen är giltig
          if ! jq . azure_credentials.json > /dev/null 2>&1; then
            echo "Error: AZURE_CREDENTIALS is not valid JSON"
            cat azure_credentials.json
            rm azure_credentials.json
            exit 1
          fi
          
          # Extrahera värden och logga in
          CLIENT_ID=$(jq -r '.clientId // .appId' azure_credentials.json)
          CLIENT_SECRET=$(jq -r '.clientSecret // .password' azure_credentials.json)
          TENANT_ID=$(jq -r '.tenantId' azure_credentials.json)
          
          if [[ -z "$CLIENT_ID" || -z "$CLIENT_SECRET" || -z "$TENANT_ID" || "$CLIENT_ID" == "null" || "$CLIENT_SECRET" == "null" || "$TENANT_ID" == "null" ]]; then
            echo "Error: Could not extract required values from AZURE_CREDENTIALS"
            echo "Make sure AZURE_CREDENTIALS contains clientId/appId, clientSecret/password, and tenantId"
            rm azure_credentials.json
            exit 1
          fi
          
          # Försök logga in
          az login --service-principal --username "$CLIENT_ID" --password "$CLIENT_SECRET" --tenant "$TENANT_ID"
          LOGIN_STATUS=$?
          
          # Ta bort den temporära filen
          rm azure_credentials.json
          
          if [[ $LOGIN_STATUS -ne 0 ]]; then
            echo "Failed to login with AZURE_CREDENTIALS JSON"
            exit 1
          fi
          
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with AZURE_CREDENTIALS JSON"
        else
          echo "No valid Azure credentials found. Please set either AZURE_CREDENTIALS JSON or individual AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET."
          exit 1
        fi
    
    # Hämta ACR access token för att kunna logga in på ACR
    - name: Get ACR Access Token (Prod)
      id: get-acr-token-prod
      run: |
        # Kontrollera om vi redan är inloggad i Azure
        if ! az account show &>/dev/null; then
          echo "Not logged in to Azure CLI. Cannot get ACR token."
          exit 1
        fi
        
        # Försök hämta token med fallback för felhantering
        set +e  # Tillåt kommandon att misslyckas utan att avsluta skriptet
        TOKEN=$(az acr login --name ${{ env.PROD_REGISTRY }} --expose-token --output tsv --query accessToken 2>/dev/null)
        ACR_STATUS=$?
        set -e  # Återställ normal felhantering
        
        if [[ $ACR_STATUS -ne 0 || -z "$TOKEN" ]]; then
          echo "Failed to get ACR token directly. Trying with managed identity..."
          
          # Försök med managed identity
          MANAGED_TOKEN=$(az account get-access-token --resource https://management.azure.com/ --query accessToken -o tsv)
          if [[ -n "$MANAGED_TOKEN" ]]; then
            echo "Got managed identity token. Using it for ACR access."
            TOKEN=$(curl -X POST -H "Content-Type: application/json" -H "Authorization: Bearer $MANAGED_TOKEN" \
                  "https://management.azure.com/subscriptions/${{ env.AZURE_SUBSCRIPTION }}/resourceGroups/${{ env.PROD_RESOURCE_GROUP }}/providers/Microsoft.ContainerRegistry/registries/$(echo ${{ env.PROD_REGISTRY }} | cut -d. -f1)/listCredentials?api-version=2023-01-01-preview" | \
                  jq -r '.accessToken')
          fi
        fi
        
        if [[ -z "$TOKEN" ]]; then
          echo "Could not obtain ACR token. Exiting."
          exit 1
        fi
        
        echo "::add-mask::$TOKEN"
        echo "token=$TOKEN" >> $GITHUB_OUTPUT
    
    # Logga in på ACR med token
    - name: Login to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.PROD_REGISTRY }}
        username: 00000000-0000-0000-0000-000000000000
        password: ${{ steps.get-acr-token-prod.outputs.token }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.PROD_REGISTRY }}/${{ env.PROD_IMAGE_NAME }}
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest
    
    - name: Build and push Docker image for PROD
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64
        build-args: |
          ENVIRONMENT=production

  deploy-to-dev:
    needs: build-and-push-dev
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure CLI Login (Deploy Dev)
      run: |
        # Installera jq om det inte redan finns
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

        # Försök logga in med direkt angivna uppgifter om de finns
        if [[ -n "${{ secrets.AZURE_CLIENT_ID }}" && -n "${{ secrets.AZURE_TENANT_ID }}" && -n "${{ secrets.AZURE_CLIENT_SECRET }}" ]]; then
          echo "Logging in with explicit client credentials"
          az login --service-principal --username "${{ secrets.AZURE_CLIENT_ID }}" --tenant "${{ secrets.AZURE_TENANT_ID }}" --password "${{ secrets.AZURE_CLIENT_SECRET }}"
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with explicit credentials"
        # Om det inte finns explicita uppgifter, försök med AZURE_CREDENTIALS JSON
        elif [[ -n "${{ secrets.AZURE_CREDENTIALS }}" ]]; then
          echo "Trying to login with AZURE_CREDENTIALS JSON"
          # Skapa temporär fil för JSON-data
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          
          # Kontrollera att JSON-filen är giltig
          if ! jq . azure_credentials.json > /dev/null 2>&1; then
            echo "Error: AZURE_CREDENTIALS is not valid JSON"
            cat azure_credentials.json
            rm azure_credentials.json
            exit 1
          fi
          
          # Extrahera värden och logga in
          CLIENT_ID=$(jq -r '.clientId // .appId' azure_credentials.json)
          CLIENT_SECRET=$(jq -r '.clientSecret // .password' azure_credentials.json)
          TENANT_ID=$(jq -r '.tenantId' azure_credentials.json)
          
          if [[ -z "$CLIENT_ID" || -z "$CLIENT_SECRET" || -z "$TENANT_ID" || "$CLIENT_ID" == "null" || "$CLIENT_SECRET" == "null" || "$TENANT_ID" == "null" ]]; then
            echo "Error: Could not extract required values from AZURE_CREDENTIALS"
            echo "Make sure AZURE_CREDENTIALS contains clientId/appId, clientSecret/password, and tenantId"
            rm azure_credentials.json
            exit 1
          fi
          
          # Försök logga in
          az login --service-principal --username "$CLIENT_ID" --password "$CLIENT_SECRET" --tenant "$TENANT_ID"
          LOGIN_STATUS=$?
          
          # Ta bort den temporära filen
          rm azure_credentials.json
          
          if [[ $LOGIN_STATUS -ne 0 ]]; then
            echo "Failed to login with AZURE_CREDENTIALS JSON"
            exit 1
          fi
          
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with AZURE_CREDENTIALS JSON"
        else
          echo "No valid Azure credentials found. Please set either AZURE_CREDENTIALS JSON or individual AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET."
          exit 1
        fi
    
    - name: Get image info
      run: |
        echo "Deploying image: ${{ needs.build-and-push-dev.outputs.image-tag }}"

    - name: Deploy to Container App
      run: |
        az containerapp update \
          --subscription ${{ env.AZURE_SUBSCRIPTION }} \
          --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
          --name ${{ env.DEV_CONTAINER_APP }} \
          --image ${{ needs.build-and-push-dev.outputs.image-tag }}

    - name: Verify deployment
      run: |
        echo "Verifying deployment..."
        REVISION=$(az containerapp revision list \
          --subscription ${{ env.AZURE_SUBSCRIPTION }} \
          --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
          --name ${{ env.DEV_CONTAINER_APP }} \
          --query "[0].name" -o tsv)
        echo "Latest revision: $REVISION"
        
        STATUS=$(az containerapp revision show \
          --subscription ${{ env.AZURE_SUBSCRIPTION }} \
          --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
          --name ${{ env.DEV_CONTAINER_APP }} \
          --revision $REVISION \
          --query "properties.status" -o tsv)
        echo "Revision status: $STATUS"
        
        if [ "$STATUS" != "Running" ]; then
          echo "Deployment not running. Checking logs..."
          az containerapp logs show \
            --subscription ${{ env.AZURE_SUBSCRIPTION }} \
            --resource-group ${{ env.DEV_RESOURCE_GROUP }} \
            --name ${{ env.DEV_CONTAINER_APP }} \
            --revision $REVISION \
            --tail 50
          exit 1
        fi
        
        echo "✅ Dev deployment successful!"

  deploy-to-production:
    needs: build-and-push-prod
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure CLI Login (Deploy Prod)
      run: |
        # Installera jq om det inte redan finns
        if ! command -v jq &> /dev/null; then
          sudo apt-get update
          sudo apt-get install -y jq
        fi

        # Försök logga in med direkt angivna uppgifter om de finns
        if [[ -n "${{ secrets.AZURE_CLIENT_ID }}" && -n "${{ secrets.AZURE_TENANT_ID }}" && -n "${{ secrets.AZURE_CLIENT_SECRET }}" ]]; then
          echo "Logging in with explicit client credentials"
          az login --service-principal --username "${{ secrets.AZURE_CLIENT_ID }}" --tenant "${{ secrets.AZURE_TENANT_ID }}" --password "${{ secrets.AZURE_CLIENT_SECRET }}"
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with explicit credentials"
        # Om det inte finns explicita uppgifter, försök med AZURE_CREDENTIALS JSON
        elif [[ -n "${{ secrets.AZURE_CREDENTIALS }}" ]]; then
          echo "Trying to login with AZURE_CREDENTIALS JSON"
          # Skapa temporär fil för JSON-data
          echo '${{ secrets.AZURE_CREDENTIALS }}' > azure_credentials.json
          
          # Kontrollera att JSON-filen är giltig
          if ! jq . azure_credentials.json > /dev/null 2>&1; then
            echo "Error: AZURE_CREDENTIALS is not valid JSON"
            cat azure_credentials.json
            rm azure_credentials.json
            exit 1
          fi
          
          # Extrahera värden och logga in
          CLIENT_ID=$(jq -r '.clientId // .appId' azure_credentials.json)
          CLIENT_SECRET=$(jq -r '.clientSecret // .password' azure_credentials.json)
          TENANT_ID=$(jq -r '.tenantId' azure_credentials.json)
          
          if [[ -z "$CLIENT_ID" || -z "$CLIENT_SECRET" || -z "$TENANT_ID" || "$CLIENT_ID" == "null" || "$CLIENT_SECRET" == "null" || "$TENANT_ID" == "null" ]]; then
            echo "Error: Could not extract required values from AZURE_CREDENTIALS"
            echo "Make sure AZURE_CREDENTIALS contains clientId/appId, clientSecret/password, and tenantId"
            rm azure_credentials.json
            exit 1
          fi
          
          # Försök logga in
          az login --service-principal --username "$CLIENT_ID" --password "$CLIENT_SECRET" --tenant "$TENANT_ID"
          LOGIN_STATUS=$?
          
          # Ta bort den temporära filen
          rm azure_credentials.json
          
          if [[ $LOGIN_STATUS -ne 0 ]]; then
            echo "Failed to login with AZURE_CREDENTIALS JSON"
            exit 1
          fi
          
          az account set --subscription "${{ env.AZURE_SUBSCRIPTION }}"
          echo "Azure CLI login successful with AZURE_CREDENTIALS JSON"
        else
          echo "No valid Azure credentials found. Please set either AZURE_CREDENTIALS JSON or individual AZURE_CLIENT_ID, AZURE_TENANT_ID, and AZURE_CLIENT_SECRET."
          exit 1
        fi
    
    - name: Deploy to Production Container App
      run: |
        az containerapp update \
          --subscription ${{ env.AZURE_SUBSCRIPTION }} \
          --resource-group ${{ env.PROD_RESOURCE_GROUP }} \
          --name ${{ env.PROD_CONTAINER_APP }} \
          --image ${{ needs.build-and-push-prod.outputs.image-tag }}
    
    - name: Verify production deployment
      run: |
        echo "Verifying production deployment..."
        REVISION=$(az containerapp revision list \
          --subscription ${{ env.AZURE_SUBSCRIPTION }} \
          --resource-group ${{ env.PROD_RESOURCE_GROUP }} \
          --name ${{ env.PROD_CONTAINER_APP }} \
          --query "[0].name" -o tsv)
        
        STATUS=$(az containerapp revision show \
          --subscription ${{ env.AZURE_SUBSCRIPTION }} \
          --resource-group ${{ env.PROD_RESOURCE_GROUP }} \
          --name ${{ env.PROD_CONTAINER_APP }} \
          --revision $REVISION \
          --query "properties.status" -o tsv)
          
        if [ "$STATUS" != "Running" ]; then
          echo "Production deployment not running. Checking logs..."
          az containerapp logs show \
            --subscription ${{ env.AZURE_SUBSCRIPTION }} \
            --resource-group ${{ env.PROD_RESOURCE_GROUP }} \
            --name ${{ env.PROD_CONTAINER_APP }} \
            --revision $REVISION \
            --tail 50
          exit 1
        fi
        
        echo "✅ Production deployment successful!"
